{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hjoo/distributed_systems/client/src/App.js\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\n\nclass DisplayThings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.formStateHandler = event => {\n      this.setState({\n        value: event.target.value\n      });\n    };\n\n    this.formSubmitHandler = event => {\n      alert(\"form saved\");\n      console.log(event);\n      this.setUser();\n    };\n\n    this.ServerName = \"View\";\n    this.serviceRegistryUrl = \"http://localhost:3005\";\n    this.ADDRESS = \"http://localhost:\" + 3000;\n    this.servers = [];\n    this.state = {\n      time: \"\",\n      value: \"\",\n      users: [],\n      serverStatus: []\n    };\n  }\n  /* \n  Refresh values to synchronize multiple sessions.\n  */\n\n\n  componentDidMount() {\n    this.postStatusAvailable();\n    this.getTime();\n    this.getUsers();\n    this.interval = setInterval(() => this.getTime(), 3000);\n    this.interval2 = setInterval(() => this.getUsers(), 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearInterval(this.interval2);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.users.length !== this.state.users.length) {\n      this.getUsers();\n    }\n  }\n  /*\n  Functions to handle updating state\n  */\n\n\n  /*\n  Fetching values for frontpage. Server values set here.\n  */\n  getTime() {\n    console.log(this.ServerName);\n    var serverToUse = this.getBackEndServer();\n    console.log(\"GET TIME \" + serverToUse);\n    fetch(serverToUse + \"/time\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      return response.text();\n    }).then(response => {\n      this.setState({\n        time: response\n      });\n    });\n  }\n  /* Functions for updating status to Service Registry */\n\n\n  getStatus(props) {\n    var serverToUse = props;\n    console.log(\"GET STATUS \" + serverToUse);\n    fetch(serverToUse + \"/status\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      return response.status;\n    }).then(response => {\n      this.setState({\n        serverStatus: response\n      });\n    });\n  }\n\n  getServersFromRegistry() {\n    var be_address = servers.filter(s => s.name == \"Controller\")[0];\n\n    if (typeof be_address !== \"undefined\") {\n      be_address = be_address.url;\n      SERVERS.forEach(server => {\n        this.getStatus(server);\n        var status = this.state.status;\n        console.log(\"this status:\", status);\n\n        if (this.getStatus(server) === \"OK\") {}\n      });\n      var id = Math.round(Math.random());\n      return SERVERS[id];\n    } else {\n      console.log(\"Service not available\");\n    }\n  }\n\n  getAvailableServices() {\n    fetch(this.serviceRegistryUrl + \"/services\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      return response.json();\n    }).then(response => {\n      this.servers = response;\n      return response;\n    }).catch(error => {\n      console.log(error);\n    });\n    console.log(\"GET SERVICE URL. Server time\");\n  }\n\n  postStatusAvailable() {\n    fetch(this.serviceRegistryUrl + \"/service\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        name: this.ServerName,\n        url: this.ADDRESS,\n        status: 200\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      return response.status;\n    }).then(response => {\n      console.log(\"RESPONSE:\", response.status);\n    }).catch(error => console.log(\"Service not available: \", error));\n  }\n  /* Values to and from backend servers */\n\n\n  getUsers() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"GET USERS \" + serverToUse);\n    fetch(serverToUse + \"/users\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      return response.json();\n    }).then(response => {\n      this.setState({\n        users: response\n      });\n    }).catch(error => console.log(\"Service not available: \", error));\n  }\n\n  setUser() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"POST USER \" + serverToUse);\n    fetch(serverToUse + \"/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        user: this.state.value,\n        information: \"Setting user\"\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      this.setState({\n        status: response\n      });\n      console.log(response);\n    }).catch(error => console.log(\"Service not available: \", error));\n  }\n  /*\n  Render front end. List of attendees, form to add attendees.\n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingBottom: \"20%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \" Attendees\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n              children: this.state.users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [user.name, \" \", user.time]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.formSubmitHandler,\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \" Enter names of attendees \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \" Name of an attendee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: this.state.value,\n                onChange: this.formStateHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              style: {\n                textAlign: \"left\",\n                marginLeft: \"35%\"\n              },\n              children: [\" \", \"Time is \", this.state.time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DisplayThings;","map":{"version":3,"sources":["/home/hjoo/distributed_systems/client/src/App.js"],"names":["React","Component","DisplayThings","constructor","props","formStateHandler","event","setState","value","target","formSubmitHandler","alert","console","log","setUser","ServerName","serviceRegistryUrl","ADDRESS","servers","state","time","users","serverStatus","componentDidMount","postStatusAvailable","getTime","getUsers","interval","setInterval","interval2","componentWillUnmount","clearInterval","componentDidUpdate","prevProps","prevState","length","serverToUse","getBackEndServer","fetch","then","response","ok","Error","status","text","getStatus","getServersFromRegistry","be_address","filter","s","name","url","SERVERS","forEach","server","id","Math","round","random","getAvailableServices","json","catch","error","method","headers","Accept","body","JSON","stringify","user","information","render","paddingBottom","map","textAlign","marginLeft"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\n\nclass DisplayThings extends Component {\n  constructor(props) {\n    super(props);\n    this.ServerName = \"View\";\n    this.serviceRegistryUrl = \"http://localhost:3005\";\n    this.ADDRESS = \"http://localhost:\" + 3000;\n    this.servers = [];\n\n    this.state = {\n      time: \"\",\n      value: \"\",\n      users: [],\n      serverStatus: [],\n    };\n  }\n\n  /* \nRefresh values to synchronize multiple sessions.\n*/\n  componentDidMount() {\n    this.postStatusAvailable();\n    this.getTime();\n    this.getUsers();\n    this.interval = setInterval(() => this.getTime(), 3000);\n    this.interval2 = setInterval(() => this.getUsers(), 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearInterval(this.interval2);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.users.length !== this.state.users.length) {\n      this.getUsers();\n    }\n  }\n\n  /*\nFunctions to handle updating state\n*/\n\n  formStateHandler = (event) => {\n    this.setState({ value: event.target.value });\n  };\n\n  formSubmitHandler = (event) => {\n    alert(\"form saved\");\n    console.log(event);\n    this.setUser();\n  };\n\n  /*\nFetching values for frontpage. Server values set here.\n*/\n\n  getTime() {\n    console.log(this.ServerName);\n    var serverToUse = this.getBackEndServer();\n    console.log(\"GET TIME \" + serverToUse);\n    fetch(serverToUse + \"/time\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        return response.text();\n      })\n      .then((response) => {\n        this.setState({ time: response });\n      });\n  }\n\n  /* Functions for updating status to Service Registry */\n  getStatus(props) {\n    var serverToUse = props;\n    console.log(\"GET STATUS \" + serverToUse);\n    fetch(serverToUse + \"/status\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        return response.status;\n      })\n      .then((response) => {\n        this.setState({ serverStatus: response });\n      });\n  }\n\n  getServersFromRegistry() {\n    var be_address = servers.filter((s) => s.name == \"Controller\")[0];\n    if (typeof be_address !== \"undefined\") {\n      be_address = be_address.url;\n\n      SERVERS.forEach((server) => {\n        this.getStatus(server);\n        var status = this.state.status;\n        console.log(\"this status:\", status);\n        if (this.getStatus(server) === \"OK\") {\n        }\n      });\n      var id = Math.round(Math.random());\n      return SERVERS[id];\n    } else {\n      console.log(\"Service not available\");\n    }\n  }\n\n  getAvailableServices() {\n    fetch(this.serviceRegistryUrl + \"/services\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        return response.json();\n      })\n      .then((response) => {\n        this.servers = response;\n        return response;\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    console.log(\"GET SERVICE URL. Server time\");\n  }\n\n  postStatusAvailable() {\n    fetch(this.serviceRegistryUrl + \"/service\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        name: this.ServerName,\n        url: this.ADDRESS,\n        status: 200,\n      }),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        return response.status;\n      })\n      .then((response) => {\n        console.log(\"RESPONSE:\", response.status);\n      })\n      .catch((error) => console.log(\"Service not available: \", error));\n  }\n\n  /* Values to and from backend servers */\n\n  getUsers() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"GET USERS \" + serverToUse);\n    fetch(serverToUse + \"/users\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        return response.json();\n      })\n      .then((response) => {\n        this.setState({ users: response });\n      })\n      .catch((error) => console.log(\"Service not available: \", error));\n  }\n\n  setUser() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"POST USER \" + serverToUse);\n    fetch(serverToUse + \"/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        user: this.state.value,\n        information: \"Setting user\",\n      }),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        this.setState({ status: response });\n        console.log(response);\n      })\n      .catch((error) => console.log(\"Service not available: \", error));\n  }\n  /*\nRender front end. List of attendees, form to add attendees.\n*/\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <div style={{ paddingBottom: \"20%\" }}>\n              <h2> Attendees</h2>\n              <ol>\n                {this.state.users.map((user) => (\n                  <li>\n                    {user.name} {user.time}\n                  </li>\n                ))}\n              </ol>\n            </div>\n            <div>\n              <form onSubmit={this.formSubmitHandler}>\n                <h4> Enter names of attendees </h4>\n                <p> Name of an attendee</p>\n                <input\n                  type=\"text\"\n                  value={this.state.value}\n                  onChange={this.formStateHandler}\n                />\n                <input type=\"submit\" />\n              </form>\n              <h6\n                style={{\n                  textAlign: \"left\",\n                  marginLeft: \"35%\",\n                }}\n              >\n                {\" \"}\n                Time is {this.state.time}\n              </h6>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default DisplayThings;\n"]},"metadata":{},"sourceType":"module"}