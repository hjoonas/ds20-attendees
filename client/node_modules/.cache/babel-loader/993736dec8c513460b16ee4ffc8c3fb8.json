{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hjoo/distributed_systems/client/src/App.js\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\n\nclass DisplayThings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.formStateHandler = event => {\n      this.setState({\n        value: event.target.value\n      });\n    };\n\n    this.formSubmitHandler = event => {\n      alert(\"form saved\");\n      console.log(event);\n      this.setUser();\n    };\n\n    this.state = {\n      time: \"\",\n      value: \"\",\n      users: [],\n      status: \"\"\n    };\n  }\n  /* \n  Refresh values to synchronize multiple sessions.\n  */\n\n\n  componentDidMount() {\n    this.getTime();\n    this.getUsers();\n    this.interval = setInterval(() => this.getTime(), 3000);\n    this.interval2 = setInterval(() => this.getUsers(), 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearInterval(this.interval2);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.users.length !== this.state.users.length) {\n      this.getUsers();\n    }\n  }\n  /*\n  Functions to handle updating state\n  */\n\n\n  /*\n  Fetching values for frontpage. Server values set here.\n  */\n  getBackEndServer() {\n    var SERVERS = [];\n    var BE_SERVER1 = \"http://localhost:3001\";\n    var BE_SERVER2 = \"http://localhost:3002\";\n    SERVERS.push(BE_SERVER1);\n    SERVERS.push(BE_SERVER2);\n    SERVERS.forEach(server => {\n      console.log(\"this status:\", this.getStatus(server));\n\n      if (this.getStatus(server) === \"OK\") {}\n    });\n    var id = Math.round(Math.random());\n    return SERVERS[id];\n  }\n\n  getTime() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"GET TIME \" + serverToUse);\n    fetch(serverToUse + \"/time\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      return response.text();\n    }).then(response => {\n      this.setState({\n        time: response\n      });\n    });\n  }\n\n  async getStatus(props) {\n    var serverToUse = props;\n    console.log(\"GET STATUS \" + serverToUse);\n    var status = await fetch(serverToUse + \"/status\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      return response;\n    }).then(response => {\n      return \"aaa\";\n    });\n    return await status;\n  }\n\n  getUsers() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"GET USERS \" + serverToUse);\n    fetch(serverToUse + \"/users\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      return response.json();\n    }).then(response => {\n      this.setState({\n        users: response\n      });\n    });\n  }\n\n  setUser() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"POST USER \" + serverToUse);\n    fetch(serverToUse + \"/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        user: this.state.value,\n        information: \"Setting user\"\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n\n      this.setState({\n        status: response\n      });\n      console.log(response);\n    });\n  }\n  /*\n  Render front end. List of attendees, form to add attendees.\n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingBottom: \"20%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \" Attendees\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n              children: this.state.users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [user.name, \" \", user.time]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.formSubmitHandler,\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \" Enter names of attendees \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \" Name of an attendee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: this.state.value,\n                onChange: this.formStateHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              style: {\n                textAlign: \"left\",\n                marginLeft: \"35%\"\n              },\n              children: [\" \", \"Time is \", this.state.time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DisplayThings;","map":{"version":3,"sources":["/home/hjoo/distributed_systems/client/src/App.js"],"names":["React","Component","DisplayThings","constructor","props","formStateHandler","event","setState","value","target","formSubmitHandler","alert","console","log","setUser","state","time","users","status","componentDidMount","getTime","getUsers","interval","setInterval","interval2","componentWillUnmount","clearInterval","componentDidUpdate","prevProps","prevState","length","getBackEndServer","SERVERS","BE_SERVER1","BE_SERVER2","push","forEach","server","getStatus","id","Math","round","random","serverToUse","fetch","then","response","ok","Error","text","json","method","headers","Accept","body","JSON","stringify","user","information","render","paddingBottom","map","name","textAlign","marginLeft"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\n\nclass DisplayThings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      time: \"\",\n      value: \"\",\n      users: [],\n      status: \"\",\n    };\n  }\n\n  /* \nRefresh values to synchronize multiple sessions.\n*/\n  componentDidMount() {\n    this.getTime();\n    this.getUsers();\n    this.interval = setInterval(() => this.getTime(), 3000);\n    this.interval2 = setInterval(() => this.getUsers(), 3000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearInterval(this.interval2);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.users.length !== this.state.users.length) {\n      this.getUsers();\n    }\n  }\n\n  /*\nFunctions to handle updating state\n*/\n\n  formStateHandler = (event) => {\n    this.setState({ value: event.target.value });\n  };\n\n  formSubmitHandler = (event) => {\n    alert(\"form saved\");\n    console.log(event);\n    this.setUser();\n  };\n\n  /*\nFetching values for frontpage. Server values set here.\n*/\n\n  getBackEndServer() {\n    var SERVERS = [];\n    var BE_SERVER1 = \"http://localhost:3001\";\n    var BE_SERVER2 = \"http://localhost:3002\";\n    SERVERS.push(BE_SERVER1);\n    SERVERS.push(BE_SERVER2);\n\n    SERVERS.forEach((server) => {\n      console.log(\"this status:\", this.getStatus(server));\n      if (this.getStatus(server) === \"OK\") {\n      }\n    });\n    var id = Math.round(Math.random());\n    return SERVERS[id];\n  }\n\n  getTime() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"GET TIME \" + serverToUse);\n    fetch(serverToUse + \"/time\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        return response.text();\n      })\n      .then((response) => {\n        this.setState({ time: response });\n      });\n  }\n\n  async getStatus(props) {\n    var serverToUse = props;\n    console.log(\"GET STATUS \" + serverToUse);\n    var status = await fetch(serverToUse + \"/status\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        return response;\n      })\n      .then((response) => {\n        return \"aaa\";\n      });\n    return await status;\n  }\n\n  getUsers() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"GET USERS \" + serverToUse);\n    fetch(serverToUse + \"/users\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"HTTP error\" + response.status);\n        }\n        return response.json();\n      })\n      .then((response) => {\n        this.setState({ users: response });\n      });\n  }\n\n  setUser() {\n    var serverToUse = this.getBackEndServer();\n    console.log(\"POST USER \" + serverToUse);\n    fetch(serverToUse + \"/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        user: this.state.value,\n        information: \"Setting user\",\n      }),\n    }).then((response) => {\n      if (!response.ok) {\n        throw new Error(\"HTTP error\" + response.status);\n      }\n      this.setState({ status: response });\n      console.log(response);\n    });\n  }\n  /*\nRender front end. List of attendees, form to add attendees.\n*/\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <div style={{ paddingBottom: \"20%\" }}>\n              <h2> Attendees</h2>\n              <ol>\n                {this.state.users.map((user) => (\n                  <li>\n                    {user.name} {user.time}\n                  </li>\n                ))}\n              </ol>\n            </div>\n            <div>\n              <form onSubmit={this.formSubmitHandler}>\n                <h4> Enter names of attendees </h4>\n                <p> Name of an attendee</p>\n                <input\n                  type=\"text\"\n                  value={this.state.value}\n                  onChange={this.formStateHandler}\n                />\n                <input type=\"submit\" />\n              </form>\n              <h6\n                style={{\n                  textAlign: \"left\",\n                  marginLeft: \"35%\",\n                }}\n              >\n                {\" \"}\n                Time is {this.state.time}\n              </h6>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default DisplayThings;\n"]},"metadata":{},"sourceType":"module"}